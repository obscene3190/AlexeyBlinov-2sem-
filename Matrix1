#include "stdafx.h"
#include <iostream>
#include <sstream>
#include <cmath>
#include <fstream>

using namespace std;

class matrix_t {
	int ** data;
	unsigned int rows;
	unsigned int columns;
public:
	ifstream & read(string fileName) {
		char op;
		ifstream input;
		input.open(fileName.c_str());
		if (input.is_open()) {
			string  string;
			getline(input, string);
			istringstream stream(string);
			if (stream >> rows && stream >> op && op == ',' && stream >> columns) {
				data = new int *[rows];
				for (unsigned int i = 0; i < rows; ++i) {
					data[i] = new int[columns];
					for (unsigned int j = 0; j < columns; ++j) {
						data[i][j] = 0;
					}
				}
				for (unsigned int i = 0; i < rows; i++) {
					for (unsigned int j = 0; j < columns; j++) {
						input >> data[i][j];
					}
				}
			}
		}
		else {
			cout << "Error";
		}
		input.close();
	}
	ostream & write(ostream & stream) {
		stream << endl;
		for (unsigned int i = 0; i < rows; i++) {
			for (unsigned int j = 0; j < columns; j++) {
				if (data[i][j] == -0) {
					stream << 0 << " ";
				}
				else {
					stream << data[i][j] << " ";
				}
			}
			stream << endl;
		}
	}
	matrix_t add(matrix_t & other) {
		matrix_t result;
		//result.data = new int *[rows];
		for (unsigned int i = 0; i < rows; i++) {
			//data[i] = new int[columns];
			for (unsigned int j = 0; j < columns; j++) {
				result.data[i][j] = data[i][j] + other.data[i][j];
			}
		}
		return result;
	}
	// matrix_t sub(matrix_t & other);
	// matrix_t mul(matrix_t & other);
	// matrix_t trans(matrix_t & other);
};

float** create(float** &matrix, unsigned int rows, unsigned int columns) {
	matrix = new float *[rows];
	for (unsigned int i = 0; i < rows; ++i) {
		matrix[i] = new float[columns];
		for (unsigned int j = 0; j < columns; ++j) {
			matrix[i][j] = 0.0f;
		}
	}
	return matrix;
}

void destroy(float ** elements, unsigned int rows)
{
	for (unsigned int i = 0; i < rows; ++i) {
		delete[] elements[i];
	}
	delete[] elements;
}

void write(ostream & stream, float ** elements, unsigned int rows, unsigned int columns) {
	stream << endl;
	for (unsigned int i = 0; i < rows; i++) {
		for (unsigned int j = 0; j < columns; j++) {
			if (elements[i][j] == -0) {
				stream << 0 << " ";
			}
			else {
				stream << elements[i][j] << " ";
			}
		}
		stream << endl;
	}
}





float ** mult(float ** matrix1, float ** matrix2, float ** &matrix, unsigned int rows, unsigned int columns) {
	matrix = new float *[rows];
	for (unsigned int i = 0; i < rows; i++) {
		matrix[i] = new float[columns];
		for (unsigned int j = 0; j < columns; j++) {
			float res = 0.0f;
			for (unsigned int k = 0; k< rows; k++) {
				res += matrix1[i][k] * matrix2[k][j];
				matrix[i][j] = res;
			}
		}
	}
	return matrix;
}

float ** trans(float ** matrix1, float ** &matrix, unsigned int rows, unsigned int columns) {
	matrix = new float *[columns];
	for (unsigned int i = 0; i < columns; i++) {
		matrix[i] = new float[rows];
		for (unsigned int j = 0; j < rows; j++) {
			matrix[i][j] = matrix1[j][i];
		}
	}
	return matrix;
}


float** rewritefromfile(unsigned int &rows, unsigned int &columns, string FileName) {
	float** matrix = nullptr;
	char op;
	ifstream input;
	input.open(FileName.c_str());
	if (input.is_open()) {
		string  string;
		getline(input, string);
		istringstream stream(string);
		if (stream >> rows && stream >> op && op == ',' && stream >> columns) {
			matrix = create(matrix, rows, columns);
			for (unsigned int i = 0; i < rows; i++) {
				for (unsigned int j = 0; j < columns; j++) {
					input >> matrix[i][j];
				}
			}
		}
	}
	else {
		cout << "Error";
		return nullptr;
	}
	input.close();
	return matrix;
}

bool readFileName(string &fileName) {
	bool result = true;
	string string;
	getline(cin, string);
	istringstream stream(string);
	if (!(stream >> fileName)) {
		result = !result;
	}
	return result;
}


int main() {
	/*unsigned int rows1 = 0, rows2 = 0, columns1 = 0, columns2 = 0;
	char op;
	string fileName1, fileName2;
	float ** matrix1 = new float *[rows1];
	float ** matrix;
	if (readFileName(fileName1)) {
	matrix1 = rewritefromfile(rows1, columns1, fileName1);
	cin >> op;
	cin.get();
	if (op == 'T') {
	trans(matrix1, matrix, rows1, columns1);
	write(cout, matrix, columns1, rows1);
	}
	else if (rows1 == columns1 && (op == '-' || op == '+' || op == '*')) {
	if (readFileName(fileName2)) {
	float ** matrix2 = new float *[rows2];
	matrix2 = rewritefromfile(rows2, columns2, fileName2);
	if (rows1 == rows2 && columns1 == columns2) {
	switch (op) {
	case '+': {
	add(matrix1, matrix2, matrix, rows1, columns1);
	write(cout, matrix, rows1, columns1);
	break;
	}
	case '-': {
	sub(matrix1, matrix2, matrix, rows1, columns1);
	write(cout, matrix, rows1, columns1);
	break;
	}
	case '*': {
	mult(matrix1, matrix2, matrix, rows1, columns1);
	write(cout, matrix, rows1, columns1);
	break;
	}
	default:
	cout << "An error has occured while reading input data";
	}
	destroy(matrix2, rows1);
	}
	}
	else cout << "An error has occured while reading input data";
	}

	}
	else cout << "An error has occured while reading input data";
	//destroy(matrix1, rows1); */
	matrix_t matrix1, matrix2;
	char op;
	string fileName1, fileName2;
	if (readFileName(fileName1)) {
		matrix1.read(fileName1);
		cin >> op;
		cin.get();
		if (op == '+') {
			if (readFileName(fileName2)) {
				matrix2.read(fileName2);
				matrix_t result;
				matrix1 = matrix1.add(matrix2);
				matrix1.write(cout);
			}
		}
	}
}
