#include <iostream>
#include <sstream>
#include <cmath>
#include <fstream>

using namespace std;

class matrix_t {
	int ** data;
	unsigned int rows;
	unsigned int columns;
public:
	matrix_t() {
		data = nullptr;
		rows = 0;
		columns = 0;
	}
	ifstream & read(ifstream & stream, string fileName) {
		stream.open(fileName.c_str());
		char op;
		if (stream.is_open() &&
			stream >> rows &&
			stream >> op && op == ',' &&
			stream >> columns) {
			data = new int *[rows];
			for (unsigned int i = 0; i < rows; ++i) {
				data[i] = new int[columns];
				for (unsigned int j = 0; j < columns; ++j) {
					stream >> data[i][j];
				}
			}
		}
		else {
			cout << "Error";
		}
		return stream;
	}
	ostream & write(ostream & stream) {
		stream << endl;
		for (unsigned int i = 0; i < rows; i++) {
			for (unsigned int j = 0; j < columns; j++) {
				if (data[i][j] == -0) {
					stream << 0 << " ";
				}
				else {
					stream << data[i][j] << " ";
				}
			}
			stream << endl;
		}
		return stream;
	}
	matrix_t add(matrix_t & other) const {
		matrix_t result;
		if (rows == other.rows && columns == other.columns) {
			for (unsigned int i = 0; i < rows; ++i) {
				for (unsigned int j = 0; j < columns; ++j) {
					result.data[i][j] = data[i][j] + other.data[i][j];
				}
			}
		}
		else {
			cout << "Something went wrong :(";
		}
		return result;
	}
	matrix_t sub(matrix_t & other) const {
		matrix_t result;
		if (rows == other.rows && columns == other.columns) {
			for (unsigned int i = 0; i < rows; ++i) {
				for (unsigned int j = 0; j < columns; ++j) {
					result.data[i][j] = data[i][j] - other.data[i][j];
				}
			}
		}
		else {
			cout << "Something went wrong :(";
		}
		return result;
	}
	matrix_t mul(matrix_t & other) const {
		matrix_t result;
		int res = 0;
		if (columns == other.rows) {
			for (unsigned int i = 0; i < rows; i++) {
				for (unsigned int j = 0; j < columns; j++) {
					res = 0;
					for (unsigned int k = 0; k < rows; k++) {
						res += data[i][k] * other.data[k][j];
						result.data[i][j] = res;
					}
				}
			}
		}
		else {
			cout << "Something went wrong :(";
		}
		return result;
	}
	matrix_t trans(matrix_t & other) const {
		matrix_t result;
		for (unsigned int i = 0; i < columns; i++) {
			for (unsigned int j = 0; j < rows; j++) {
				result.data[i][j] = data[j][i];
			}
		}
		return result;
	}
};

bool readFileName(string &fileName) {
	bool result = true;
	string string;
	getline(cin, string);
	istringstream stream(string);
	if (!(stream >> fileName)) {
		result = !result;
	}
	return result;
}


int main() {

	matrix_t matrix1, matrix2;
	char op;
	string fileName1, fileName2;
	ifstream streamA, streamB;
	if (readFileName(fileName1)) {
		matrix1.read(streamA, fileName1);
		cin >> op;
		cin.get();
		if (op == '+') {
			if (readFileName(fileName2)) {
				matrix2.read(streamB, fileName2);
				matrix_t result;
				result = matrix1.add(matrix2);
				result.write(cout);
			}
		}
	}
}
